<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Octopress Blog]]></title>
  <link href="http://sgrshah.github.io/atom.xml" rel="self"/>
  <link href="http://sgrshah.github.io/"/>
  <updated>2013-06-30T17:12:33-04:00</updated>
  <id>http://sgrshah.github.io/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sinatra organization]]></title>
    <link href="http://sgrshah.github.io/blog/2013/06/23/sinatra-organization/"/>
    <updated>2013-06-23T08:48:00-04:00</updated>
    <id>http://sgrshah.github.io/blog/2013/06/23/sinatra-organization</id>
    <content type="html"><![CDATA[<p>This blog delves into the organization patterns of larger code-bases. Up until now, we&rsquo;ve been working on relatively small projects that include one application file, and maybe 3-4 class and module files. To explore the file structure of larger projects, I will be looking through an open source Sinatra project called So-Nice. So-Nice is a simple web interface to control iTunes, Spotify, and other music players. The project&rsquo;s code-base can be found <a href="https://github.com/sunny/so-nice">here</a>.</p>

<h2>Overall structure</h2>

<p>The top level of the application&rsquo;s code-base is comprised of two folders and five main files.</p>

<p>The files:</p>

<ul style="padding-left:40px">
<li> Gemfile: The Gemfile lists all the application&#8217;s dependencies. Dependencies are all the gems that the application relies on. This file is particularly important in this application, because it loads the &#8216;anyplayer&#8217; gem, which supports the various music players, including Spotify and iTunes. Other dependencies include &#8216;sinatra,&#8217; &#8216;haml,&#8217; &#8216;xml-simple,&#8217; &#8216;json,&#8217; and &#8216;thin.&#8217; All of these gems are sourced from <a href ="http://rubygems.org">Rubygems.org</a></li> 
<li> Gemfile.lock: This file is a snapshot of all the gems and versions that were installed. This way you know the exact versions of all the gems that you used when your application last worked. This is especially important and useful when you are sharing your work with collaborators. Others won&#8217;t have to guess what veresion of the dependencies they should install.</li>
<li> README.md: The readme file contains a brief description of what the web application does and how to install and use it on your machine.</li>
<li> config.ru: This is the rackup file that the Sinatra application needs to include in its root directory. The &#8216;run&#8217; contained in this config file can be called on anything that responds to a .call method. The application itself is also &#8216;required&#8217; through the config file. In this case, the application is &#8216;sonice.rb&#8217;</li>
<li> sonice.rb: This file is the Ruby application that is loaded by the config.ru rackup file. </li>
</ul>


<p>The folders:</p>

<ul style="padding-left:40px">
<li> public: Sinatra, by default, looks for &#8216;assets,&#8217; such as CSS files and images, in the &#8216;public&#8217; folder. So-Nice&#8217;s public folder contains its stylesheet, a picture, and various javascript files.</li>
<li> views: The &#8216;views&#8217; folder contains one file, called &#8216;index.haml.&#8217; Haml is a markup language that produces clean, well-structured HTML. Haml can also handle inline code, like Ruby. Sinatra, by default, looks for webpage templates in the &#8216;views&#8217; folder.</li>
</ul>


<h2>Useful resources on the subject</h2>

<p>The following is a list of useful resources to help understand the various components of the Sinatra file structure.</p>

<ul style="padding-left:40px">
<li><a href="http://net.tutsplus.com/tutorials/ruby/an-introduction-to-haml-and-sinatra/">An introduction to Haml and Sinatra</a></li>
<li><a href="http://rubylearning.com/blog/a-quick-introduction-to-rack/">A quick introduction to Rack</a></li>
<li><a href="http://gembundler.com/v1.3/rationale.html">Bundler&#8217;s purpose and rationale</a></li>

</ul>


<p>-Sagar</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Testing]]></title>
    <link href="http://sgrshah.github.io/blog/2013/06/16/ruby-testing/"/>
    <updated>2013-06-16T14:52:00-04:00</updated>
    <id>http://sgrshah.github.io/blog/2013/06/16/ruby-testing</id>
    <content type="html"><![CDATA[<p>This weekend I scoured speakerdeck.com for a presentation related to the topics that we&rsquo;re beginning to cover in class. I came across the following slide deck from Emily Price titled <a href="https://speakerdeck.com/duien/testing-ruby">&ldquo;Testing Ruby using RSPEC with Factory Girl and Autotest&rdquo;</a>.</p>

<p>The first two weeks of class we&rsquo;ve really focused on just getting our programs to work and getting familiar with Ruby. However, late last week we began covering the concept of test-driven development. Emily Price&rsquo;s slide deck gives a high level overview of the topic.</p>

<h2>Testing best practices</h2>

<p>The presentation&rsquo;s author emphasized the following best practices for testing:</p>

<ul style="padding-left:40px">
<li>write tests first: testing is a continuous process of making your code fail, fixing it so it passes, refactoring, and repeating.</li>
<li>test your edge cases: there are always scenarios in which your code will fail that you may not think of right off the bat. Get creative and try to create tests for those scenarios that might break your code or give you strange results.</li>
<li>test behavior, not implementation: this essentially means that you want to test if the code produces the desired result, not necessarily how it produces it produces the result. </li>
</ul>


<h2>What the heck is RSPEC, Factory Girl, and Autotest anyway?</h2>

<p>RSPEC is a testing tool for Ruby, and as with all things Ruby it was designed to &ldquo;make Test-Driven Development a productive and enjoyable experience.&rdquo; Factory Girl and Autotest are both gems that work with RSPEC to aid with testing. For example, Autotest is a gem that automatically runs your tests each time you change or save a file. It allows for continuous, quick testing so that you rarely have to open up the browser to see what&rsquo;s happening to your code.</p>

<p>OK, so I&rsquo;m not an expert in test-driven development yet. But, as they say, &ldquo;the beginning of wisdom is to call things by their right names.&rdquo; Now I know what RSPEC, Factory Girl, and Autotest are and have some best practices to refer to. Thanks Emily for your speakerdeck presentation!</p>

<p>-Sagar</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The inevitable Excel-Ruby comparison]]></title>
    <link href="http://sgrshah.github.io/blog/2013/06/16/the-inevitable-excel-v-ruby-comparison/"/>
    <updated>2013-06-16T09:42:00-04:00</updated>
    <id>http://sgrshah.github.io/blog/2013/06/16/the-inevitable-excel-v-ruby-comparison</id>
    <content type="html"><![CDATA[<p>This blog post is partially inspired by Carlos Lazo&rsquo;s comparison of C++ and Ruby, which you can read <a href="http://cjlwired.github.io/">here</a>.</p>

<p>For the past 2.5 years, I have lived in Microsoft Excel. This is not a joke. I spent, on average, 50-55 hours a week in the office. More than 50% of that time was with a spreadsheet open, so that amounts to at least 3125 hours. Yikes!</p>

<p>After my first few weeks of Ruby, I can&rsquo;t help but make analogies to the world of Excel and compare Excel&rsquo;s functionality to the way object oriented programming languages work.</p>

<p>Ruby is an object oriented programming language, which means it focuses on the interaction of objects rather than a sequence of tasks like in procedural programming languages. Three main components of an object oriented programming language are Classes, Objects, and Methods.</p>

<h2>Classes and Methods</h2>

<p>In Excel, think of cells, in general, as a Class. The Class called &lsquo;Cells&rsquo; has specific characteristics and behaviors that it can execute, which are defined by its Methods. What is an example of a Method that the &lsquo;Cell&rsquo; Class would have? The &lsquo;Cell&rsquo; Class would definitely have the &lsquo;sum&rsquo; Method, which would take in parameters (maybe an array of other Objects) and calculate it&rsquo;s sum. Below is my basic interpretation of what a &lsquo;Cell&rsquo; Class might look like with it&rsquo;s first two Methods, the initialize Method and the sum Method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Cell</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:value</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>      <span class="vi">@value</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">sum</span><span class="p">(</span><span class="n">array</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@value</span> <span class="o">=</span> <span class="mi">0</span> <span class="c1">#resets value to zero</span>
</span><span class='line'>      <span class="n">array</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">cell</span><span class="o">|</span>
</span><span class='line'>          <span class="vi">@value</span> <span class="o">+=</span> <span class="n">cell</span> <span class="c1">#performs addition</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Although Microsoft Excel is pretty much a closed source program, it does give hints from time to time on it&rsquo;s underlying structure. For example, in this picture you can see that Excel&rsquo;s SUM function can take multiple parameters by simply selecting a cell and dragging. To me, this is like creating an array as a parameter.</p>

<p><img src="http://sgrshah.github.io/images/excelpic1.jpg"></p>

<h2>Viewing each cell as an Object</h2>

<p>Each individual cell that you see on a spreadsheet could be thought of as an instance of the &lsquo;Cell&rsquo; Class, more commonly referred to as an Object. Each cell instance has a separate location on the computer&rsquo;s memory, has access to all of the Methods of the &lsquo;Cell&rsquo; Class, but the instance variables within each cell can contain different values depending on what you put in. So, think of the &lsquo;Cell&rsquo; Class as a template for each of the individual cells on your spreadsheet.</p>

<p>The way I imagine Excel to work is that all the cells you see in your spreadsheet are instantiated when you create a new file. In the following code, I&rsquo;ve created a basic spreadsheet with one column and four rows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a1</span> <span class="o">=</span> <span class="no">Cell</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">a2</span> <span class="o">=</span> <span class="no">Cell</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">a3</span> <span class="o">=</span> <span class="no">Cell</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">a4</span> <span class="o">=</span> <span class="no">Cell</span><span class="o">.</span><span class="n">new</span>
</span></code></pre></td></tr></table></div></figure>


<p>Based on the previous code we wrote for the &lsquo;Cell&rsquo; Class, each of these cells is unique, but can perform the sum Method in the same as every other cell. Now, let&rsquo;s add some values and use the sum Method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a1</span><span class="o">.</span><span class="n">value</span> <span class="o">=</span> <span class="mi">5</span> <span class="c1">#This is like typing in a value to a cell</span>
</span><span class='line'><span class="n">a2</span><span class="o">.</span><span class="n">value</span> <span class="o">=</span> <span class="mi">5</span><span class="o">*</span><span class="mi">5</span> <span class="c1">#This is like typing in a math operation into a cell</span>
</span><span class='line'><span class="n">a3</span><span class="o">.</span><span class="n">value</span> <span class="o">=</span> <span class="p">(</span><span class="mi">6</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">6</span><span class="p">)</span><span class="o">/</span><span class="mi">10</span>
</span><span class='line'><span class="n">a3</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="o">[</span><span class="n">a1</span><span class="o">.</span><span class="n">value</span><span class="p">,</span><span class="n">a2</span><span class="o">.</span><span class="n">value</span><span class="o">]</span><span class="p">)</span> <span class="c1">#This is like over-riding a cell&#39;s value using a sum Function by clicking and dragging multiple cells</span>
</span></code></pre></td></tr></table></div></figure>


<p>I haven&rsquo;t yet figured out how to show IRB output through markdown, but I can assure you that the answer for the last line of code was indeed 30.</p>

<p>There will always be a special place in my heart for Excel. Eventually, it will have to make room for Ruby and other languages as I become a more and more proficient programmer. At some point, I think it would be really interesting to read a little bit of Excel&rsquo;s source code and compare my conception of it&rsquo;s inner workings to reality!</p>

<p>-Sagar</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Transaction consultant turned tech trainee]]></title>
    <link href="http://sgrshah.github.io/blog/2013/06/15/transaction-consultant-turned-tech-trainee/"/>
    <updated>2013-06-15T22:21:00-04:00</updated>
    <id>http://sgrshah.github.io/blog/2013/06/15/transaction-consultant-turned-tech-trainee</id>
    <content type="html"><![CDATA[<p>For my first blog post I feel obligated to briefly explain why I am here at the Flatiron School learning computer programming.</p>

<h2>Cues from the work I enjoyed doing</h2>

<p>As an analyst who worked on corporate mergers and acquisitions, I loved building and improving complex financial models. For some odd reason I actually enjoyed handling large excel data-sets with complex schema, designing scalable and dynamic models, and making tools more efficient and replicable.</p>

<p>I always felt I was adding the most value to my company and our clients when I was creating well-designed models that others could easily understand and use. As a result, I decided that I wanted to expand on these skills and explore broader ways of creating interesting and useful tools more generally. Naturally, I gravitated to computer programming.</p>

<h2>Creativity through code</h2>

<p>The opportunity to be creative every day is very important to me. Avi Flombaum, Flatiron’s fearless leader, always says that computer programming is all about expression; that it is a creative pursuit. Everyday Avi shares with us quotes from his favorite developers. Of all the ones I’ve heard over the past two weeks, my favorite is this one from “Why the lucky stiff”</p>

<blockquote><p>When you don&rsquo;t create things, you become defined by your tastes rather than
ability. Your tastes only narrow and exclude people, so create.</p></blockquote>

<p>My goal for this course is to create as much as I can, whether it’s building a complex web-application, writing an open-source Ruby-gem, or just sharing something I learned through this blog.</p>

<h2>A quick word on doing passionate work</h2>

<p>People who have yet to find their ‘calling’ sometimes wrongly believe that their passions are latent, un-manifested parts of their identity that they’ve yet to unearth and discover. I felt this way for many years, and it put a lot of pressure on me. Big questions like “what is my passion?” and “how can I make a career out of it?” yielded either no answers, or too many (both equally paralyzing).</p>

<p>Doing passionate work is less about finding the things you are passionate about, and more about working really hard to become good at what you do. It’s easy to say, “I can’t do this, I don’t think this is my passion,” when things get difficult, even though there was a really good reason you decided to pursue that endeavor in the first place.</p>

<p>Computer programming is going to get really, really hard over the next few months. There will be times when I won’t understand a concept, or will be doing tasks that seem trivial at the moment. But, fortunately I know that my interest, enthusiasm, and love of programming will only grow as I become more and more proficient.</p>

<p>-Sagar</p>
]]></content>
  </entry>
  
</feed>
